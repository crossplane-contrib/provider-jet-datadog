/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthnMappingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AuthnMappingParameters struct {

	// Identity provider key.
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// The ID of a role to attach to all users with the corresponding key and value.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-datadog/apis/role/v1alpha1.Role
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Optional
	RoleRef *v1.Reference `json:"roleRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleSelector *v1.Selector `json:"roleSelector,omitempty" tf:"-"`

	// Identity provider value.
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// AuthnMappingSpec defines the desired state of AuthnMapping
type AuthnMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthnMappingParameters `json:"forProvider"`
}

// AuthnMappingStatus defines the observed state of AuthnMapping.
type AuthnMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthnMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthnMapping is the Schema for the AuthnMappings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadogjet}
type AuthnMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AuthnMappingSpec   `json:"spec"`
	Status            AuthnMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthnMappingList contains a list of AuthnMappings
type AuthnMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthnMapping `json:"items"`
}

// Repository type metadata.
var (
	AuthnMapping_Kind             = "AuthnMapping"
	AuthnMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthnMapping_Kind}.String()
	AuthnMapping_KindAPIVersion   = AuthnMapping_Kind + "." + CRDGroupVersion.String()
	AuthnMapping_GroupVersionKind = CRDGroupVersion.WithKind(AuthnMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthnMapping{}, &AuthnMappingList{})
}
